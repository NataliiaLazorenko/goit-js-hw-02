/* Конструкція new Array(10) створить масив, довжиною в 10 елементів. Значення в такому масиві будуть відсутні,
тобто не буде навіть undefined. Тому такий масив потрібно заповнити значеннями для подальшого використання.
Існує ще спосіб створення і заповнення масиву - можна створити порожній масив [] і заповнювати його методом push().

Швидка обробка масиву
Перевагою створення масиву заданої довжини перед додаванням в порожній масив є те,
що метод push() повільніше обробляється.

Якщо `new Array()` буде містити більше одного аргумента, то буде створений масив з елементами із аргументів.

Приклад:
new Array(3);
// [,,]

new Array(1, 2, 3);
// [1, 2, 3]

Швидке створення масиву
Порожній масив. Виклик new Array() створить порожній масив []. Але це більш повільний спосіб створення масиву у
порівнянні з використанням літерала. Якщо потрібен порожній масив, то рекомендується використовувати літерал масиву.

const arrFast = []; // швидше
const arrSlow = new Array(); // повільніше

Створення нового масиву на основі перетворення даних із старого масиву
Напиши функцію mapArray(array), яка приймає 1 параметр array - масив чисел. Функція створює новий масив
numbers розміром у довжину масиву array і заповнює його числами із масиву array помноженими на 10.
Для перебору масиву і додавання нових значень використовуй цикл for.
По завершенню перебору масиву array повертається масив numbers.*/

function mapArray(array) {
  'use strict';
  const numbers = new Array(array.length);

  for (let i = 0; i < array.length; i += 1) {
    numbers[i] = array[i] * 10;
  }

  return numbers;
}

console.log(mapArray([-2, 0, 2]));
// [-20, 0, 20]

console.log(mapArray([-2.5, 0, 2.5]));
// [-25, 0, 25]
